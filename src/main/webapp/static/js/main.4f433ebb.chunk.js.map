{"version":3,"sources":["logo.svg","Stores/GiraffeStore.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GiraffeStore","giraffes","decorate","observable","giraffeStore","CatchAll","Startside","About","withRouter","input","console","log","match","history","params","text","Button","onClick","push","observer","className","path","component","exact","xl","lg","Prepend","Text","id","placeholder","aria-label","aria-describedby","Append","map","giraffeName","key","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2IAAAA,EAAOC,QAAU,IAA0B,kC,sOCEtBC,E,sCACjBC,SAAS,CAAC,SAAS,WAGvBC,YAASF,EAAa,CAClBC,SAAUE,M,mBCQRC,EAAe,IAAIJ,EA6EzB,IAAMK,EAAW,WACb,OAAO,+DAGLC,EAAY,WACd,OAAO,0CAGLC,EAAQC,aAAW,SAACC,GAItB,OAHAC,QAAQC,IAAIF,EAAMG,OAClBF,QAAQC,IAAIF,EAAMI,SAEX,6BACH,qCAAWJ,EAAMG,MAAME,OAAOC,MAC9B,kBAACC,EAAA,EAAD,CAAQC,QAAS,kBAAKR,EAAMI,QAAQK,KAAK,OAAzC,mBAIOC,eA7Ff,WACE,OAEE,yBAAKC,UAAU,OAEX,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAM,eAAgBC,UAAWf,IACxC,kBAAC,IAAD,CAAOgB,OAAK,EAACF,KAAM,IAAKC,UAAWhB,IACnC,kBAAC,IAAD,CAAOgB,UAAWjB,MAG1B,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKmB,IAAE,EAACC,GAAG,QACP,kBAAC,IAAD,CAAYL,UAAU,QAClB,kBAAC,IAAWM,QAAZ,KACI,kBAAC,IAAWC,KAAZ,CAAiBC,GAAG,gBAApB,MAEJ,kBAAC,IAAD,CACIC,YAAY,WACZC,aAAW,WACXC,mBAAiB,iBAErB,kBAACf,EAAA,EAAD,qBAGR,kBAAC,IAAD,CAAKQ,IAAE,EAACC,GAAG,QACP,kBAAC,IAAD,CAAYL,UAAU,QAClB,kBAAC,IAAWM,QAAZ,KACI,kBAAC,IAAWC,KAAZ,WAEJ,kBAAC,IAAD,CAAaG,aAAW,mCACxB,kBAAC,IAAWE,OAAZ,KACI,kBAAC,IAAWL,KAAZ,aAEJ,kBAACX,EAAA,EAAD,uBAIZ,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAACA,EAAA,EAAD,CAAQC,QAAS,kBAAIb,EAAaH,SAASiB,KAAK,WAAhD,qBAGR,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,4BACKd,EAAaH,SAASgC,KAAI,SAACC,EAAYC,GAAb,OACvB,wBAAIA,IAAKA,GAAMD,SASnC,kBAAC,IAAD,CAAYd,UAAU,QAClB,kBAAC,IAAWM,QAAZ,KACI,kBAAC,IAAWC,KAAZ,qBAEJ,kBAAC,IAAD,CAAaG,aAAW,kBACxB,kBAACd,EAAA,EAAD,iBAIN,4BAAQI,UAAU,mBCxEJgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS3B,MACvB,2D,YCVN4B,IAASC,OAAO,kBAAC,IAAD,KAAY,kBAAC,EAAD,OAAsBC,SAASC,eAAe,SDyHpE,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4f433ebb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import {decorate, observable} from \"mobx\";\r\n\r\nexport default class GiraffeStore{\r\n    giraffes=[\"Marius\",\"Melman\"];\r\n}\r\n\r\ndecorate(GiraffeStore,{\r\n    giraffes: observable\r\n})\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\nimport FormControl from \"react-bootstrap/FormControl\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport {Button} from \"react-bootstrap\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport \"./Stores/GiraffeStore\"\nimport {Route, Switch} from \"react-router-dom\";\nimport {withRouter} from \"react-router\";\nimport GiraffeStore from \"./Stores/GiraffeStore\";\nimport {observer} from \"mobx-react\";\nconst giraffeStore = new GiraffeStore();\n\nfunction App() {\n  return (\n\n    <div className=\"App\">\n\n        <Container>\n            <Row>\n                <Switch>\n                    <Route path={\"/about/:text\"} component={About}/>\n                    <Route exact path={\"/\"} component={Startside}/>\n                    <Route component={CatchAll}/>\n                </Switch>\n            </Row>\n            <Row>\n                <Col xl lg=\"auto\">\n                    <InputGroup className=\"mb-3\">\n                        <InputGroup.Prepend>\n                            <InputGroup.Text id=\"basic-addon1\">@</InputGroup.Text>\n                        </InputGroup.Prepend>\n                        <FormControl\n                            placeholder=\"Username\"\n                            aria-label=\"Username\"\n                            aria-describedby=\"basic-addon1\"\n                        />\n                        <Button>TestButton</Button>\n                    </InputGroup>\n                </Col>\n                <Col xl lg=\"auto\">\n                    <InputGroup className=\"mb-3\">\n                        <InputGroup.Prepend>\n                            <InputGroup.Text>$</InputGroup.Text>\n                        </InputGroup.Prepend>\n                        <FormControl aria-label=\"Amount (to the nearest dollar)\" />\n                        <InputGroup.Append>\n                            <InputGroup.Text>.00</InputGroup.Text>\n                        </InputGroup.Append>\n                        <Button>Test2Button</Button>\n                    </InputGroup>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <Button onClick={()=>giraffeStore.giraffes.push(\"Elmer\")}>Tilf√∏j giraf</Button>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <ul>\n                        {giraffeStore.giraffes.map((giraffeName,key)=>\n                            <li key={key}>{giraffeName}</li>\n                        )}\n                    </ul>\n\n                </Col>\n            </Row>\n\n\n\n        <InputGroup className=\"mb-3\">\n            <InputGroup.Prepend>\n                <InputGroup.Text>Indtast her</InputGroup.Text>\n            </InputGroup.Prepend>\n            <FormControl aria-label=\"Indtast Tekst\" />\n            <Button>TestB3</Button>\n        </InputGroup>\n        </Container>\n\n      <header className=\"App-header\">\n\n      </header>\n    </div>\n\n  );\n}\n\nconst CatchAll = () => {\n    return <h3>Denne side eksisterer ikke 404</h3>\n}\n\nconst Startside = () => {\n    return <h3>Startside</h3>\n}\n\nconst About = withRouter((input) => {\n    console.log(input.match)\n    console.log(input.history)\n\n    return <div>\n        <h3>About {input.match.params.text}</h3>\n        <Button onClick={()=> input.history.push(\"/\")}>Go to front</Button>\n    </div>\n});\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\n\n\nReactDOM.render(<HashRouter><App /></HashRouter>, document.getElementById('root'));\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}